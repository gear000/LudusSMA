AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: AWS CodePipeline for a Serverless Application

Parameters:
  TelegramBotKeyParameter:
    Type: String
    Default: /telegram/bot-token
    Description: The key of SSM parameter that contains the Telegram Bot token
  TelegramAllowChatIdsKeyParameter:
    Type: String
    Default: /telegram/allow-chat-ids
    Description: The key of SSM parameter that contains the Telegram allowed chat ids
  TelegramHeaderWebhookTokenKeyParameter:
    Type: String
    Default: /telegram/header-webhook-token
    Description: The key of SSM parameter that contains the Telegram header webhook token


Resources:

  ### IAM ROLE ###

  LudusSMALambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  
  LudusSMAEventSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - 'sts:AssumeRole'
              
  ### IAM POLICY ###

  LudusSMALambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LudusSMALambdaPolicy
      Roles:
        - !Ref LudusSMALambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:*'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'           
            Resource: '*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/telegram/*'
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/meta/*'            
          - Effect: Allow
            Action:
              - 'sqs:receiveMessage'
              - 'sqs:deleteMessage'              
            Resource: !GetAtt 'LudusSMAEventsSQSQueue.Arn'            

  LudusSMAEventSchedulerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LudusSMASchedulerPolicy
      Roles:
        - !Ref LudusSMAEventSchedulerRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Resource: !GetAtt 'LudusSMAEventsSQSQueue.Arn'

  ### PARAMETER ###

  # Parameters cannot be created by Cloud Formation if they are of type SecureString
  # which is why they were created by hand inside the console
  # parameter keys are passed within the Lambda Function as environment variables.
  
  ### SECRET ###

  LudusSMAMetaCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: meta-credentials
      Description: Credential for Meta Account      
      SecretString: initial_value
  
  LudusSMAImgurCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: imgur-credentials
      Description: Credential for Imgur Account
      SecretString: initial_value

  ### DYNAMODB TABLES ###

  LudusSMAChatsHistoryDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: true
      TableName: ChatsHistory
      TableClass: STANDARD
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH

  LudusSMAEventsDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      DeletionProtectionEnabled: true
      TableName: Events
      TableClass: STANDARD
      AttributeDefinitions:
        - AttributeName: event_id
          AttributeType: S
      KeySchema:
        - AttributeName: event_id
          KeyType: HASH

### SQS QUEUE ###

  LudusSMAEventsSQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ScheduledEvents
      VisibilityTimeout: 300
        
### LAMBDA FUNCTIONS ###

  LudusSMATelegramBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda_functions/telegram_bot/
      Handler: main.lambda_handler
      Runtime: python3.11
      Timeout: 300
      MemorySize: 1024
      Architectures:
        - x86_64
      Role: !GetAtt LudusSMALambdaRole.Arn
      Environment:
        Variables:
          TELEGRAM_BOT_KEY: !Ref TelegramBotKeyParameter
          TELEGRAM_ALLOW_CHAT_IDS: !Ref TelegramAllowChatIdsKeyParameter
          TELEGRAM_HEADER_WEBHOOK_TOKEN: !Ref TelegramHeaderWebhookTokenKeyParameter
          SQS_QUEUE_EVENTS_ARN: !GetAtt LudusSMAEventsSQSQueue.Arn
          DYNAMODB_TABLE_CHATS_HISTORY_NAME: !Ref LudusSMAChatsHistoryDynamoDBTable
          DYNAMODB_TABLE_EVENTS_NAME: !Ref LudusSMAEventsDynamoDBTable
          IAM_ROLE_EVENT_SCHEDULER_ARN: !GetAtt LudusSMAEventSchedulerRole.Arn
      Layers:
        - !Ref LudusSMALambdaLayer
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /telegram-bot
            Method: post

### LAMBDA LAYER ###

  LudusSMALambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: LudusSMAUtilsLayer
      Description: LudusSMA Utils Lambda Layer
      ContentUri: lambda_functions/utils.zip
      CompatibleRuntimes:
        - python3.11

